import {
  Component,
  ElementRef,
  EventEmitter,
  OnChanges,
  OnInit,
  SimpleChanges,
  ViewChild,
} from '@angular/core';
import { Form, FormBuilder, FormGroup } from '@angular/forms';
import { TransitionCheckState } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { Duration } from 'luxon';
import {
  FileItem,
  FileLikeObject,
  FileUploader,
  ParsedResponseHeaders,
} from 'ng2-file-upload';
import { IUploadData } from './dto/upload-data';

// const URL = '/api/';
const URL = 'https://evening-anchorage-3159.herokuapp.com/api/';

@Component({
  selector: 'app-upload-file',
  templateUrl: './upload-file.component.html',
  styleUrls: ['./upload-file.component.scss'],
})
export class UploadFileComponent implements OnInit {
  uploader: FileUploader = new FileUploader({ url: URL });
  // fileItem: FileItem = new FileItem(this.uploader, File, FileUploaderOptions)
  hasBaseDropZoneOver: boolean;
  response: string;
  errorMessage: string;
  allowedMimeType = [
    'image/x-png',
    'image/gif',
    'image/jpeg',
    'image/png',
    'application/x-zip-compressed',
  ];
  typeFileZipe = 'application/x-zip-compressed';
  errorMessageMaxSize = 'File size great than 1MB';
  errorMessageWrongType = 'Not allow file format';
  maxFileSize: number = 60 * 1024 * 1024;
  fileHashes: string[] = [];
  showError: boolean = false;
  dataSource: MatTableDataSource<FileItem>;
  displayedColumns: string[] = ['name', 'size', 'progress', 'action'];
  @ViewChild('fileInput') fileInput: any;

  constructor(private fb: FormBuilder) {}

  //for prevetn CORS error
  ngAfterViewInit() {
    this.uploader.onAfterAddingFile = (item) => {
      item.withCredentials = false;
    };
  }

  ngOnInit(): void {
    this.uploader = new FileUploader({
      url: URL,
      disableMultipart: true, // 'DisableMultipart' must be 'true' for formatDataFunction to be called.
      formatDataFunctionIsAsync: true,
      headers: [{ name: 'Accept', value: 'application/json' }],
      // allowedFileType: ['image', 'zip'],
      isHTML5: true,
      method: 'POST',
      removeAfterUpload: true,
      maxFileSize: this.maxFileSize,
      allowedMimeType: this.allowedMimeType,
      formatDataFunction: async (item: any) => {
        return new Promise((resolve, reject) => {
          resolve({
            name: item._file.name,
            length: item._file.size,
            contentType: item._file.type,
            lastModified: item._file.lastModified,
            date: new Date(),
          });
        });
      },
    });
    this.hasBaseDropZoneOver = false;
    this.response = '';
    this.uploader.response.subscribe((res) => (this.response = res));

    //for prevent send undefined data to backe-end
    // this.uploader.onBuildItemForm = this.onBuildItemForm.bind(this);

    // using service to send file to server
    // this.uploader.onAfterAddingFile = ((item: FileItem) => {
    //   const objectKey = 'folder_to_upload/' + item.file.name;
    //   this.fileHandler
    //       .generateS3UploadUrl(objectKey, item.file.type) //Send the content-type to server to generate the url based on the correct content-type.
    //       .subscribe(result => {
    //         item.url = result.url;  //the pre-signed url generated by server
    //         item.method = 'PUT';
    //         item.headers =  [{name: 'Content-Type', value: item.file.type}];
    //         item.withCredentials = false;
    //         item.upload();
    //       });
    // });

    this.uploader.onErrorItem = (item, response, status, headers) =>
      this.onErrorItem(item, response, status, headers);
    this.uploader.onSuccessItem = (item, response, status, headers) =>
      this.onSuccessItem(item, response, status, headers);
    this.uploader.onCancelItem = (item, response, status, header) =>
      this.onCancelItem(item, response, status, header);
  }

  onSuccessItem(
    item: FileItem,
    response: string,
    status: number,
    headers: ParsedResponseHeaders
  ): any {
    this.uploadFile(item);
  }

  onCancelItem(
    item: FileItem,
    response: string,
    status: number,
    headers: ParsedResponseHeaders
  ): any {
    this.cancelFile(item);
    this.fileInput.nativeElement.value = '';
    this.uploader.queue.push(item);
  }

  onErrorItem(
    item: FileItem,
    response: string,
    status: number,
    headers: ParsedResponseHeaders
  ): any {
    this.fileInput.nativeElement.value = '';
    this.uploader.queue.push(item);
    this.dataSource = new MatTableDataSource(this.uploader.queue);
  }
  //   private onBuildItemForm(fileItem: FileItem, form: FormData): any {
  //     form.append('siteId', this.site.id);
  //     return { fileItem, form };
  // }

  checkTypeFileInArray(type: string): boolean {
    return this.allowedMimeType.includes(type);
  }
  uploadFile(row: FileItem) {
    this.uploader.uploadItem(row);
    this.fileInput.nativeElement.value = '';
  }

  cancelFile(row: FileItem) {
    this.uploader.cancelItem(row);
  }

  deleteFile(row: FileItem) {
    this.uploader.removeFromQueue(row);
    this.dataSource = new MatTableDataSource(this.uploader.queue);
  }

  onFileSelected(event: File[]) {
    this.removeDuplicatItemFromQueue();
    this.dataSource = new MatTableDataSource(this.uploader.queue);
  }

  public fileOverBase(e: any): void {
    this.hasBaseDropZoneOver = e;
  }

  removeDuplicatItemFromQueue() {
    for (let i = 0; i < this.uploader.queue.length; i++) {
      const item = this.uploader.queue.find(
        (item) =>
          item.file.name === this.uploader.queue[i].file.name &&
          this.uploader.queue.indexOf(item) !== i
      );
      if (item) {
        this.uploader.removeFromQueue(item);
      }
    }
  }

  checkFileTypeWhenSelectFile() {
    this.uploader.queue.forEach((item) => {
      if (!this.checkTypeFileInArray(item.file.type as string)) {
        this.uploader.removeFromQueue(item);
      }
    });
  }

  droppedFile(e: File[]) {
    this.removeDuplicatItemFromQueue();
    this.checkFileTypeWhenSelectFile();
    this.dataSource = new MatTableDataSource(this.uploader.queue);
  }
}
